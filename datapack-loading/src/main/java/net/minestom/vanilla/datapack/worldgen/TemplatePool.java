package net.minestom.vanilla.datapack.worldgen;

import net.minestom.server.utils.NamespaceID;
import net.minestom.vanilla.datapack.json.JsonUtils;

import java.util.List;

/**
 * Represents a template pool.
 * @param fallback The fallback pool. Should be an ID of a structure pool. Template in the fallback pool generates in the following two cases:
 *                 1. When the generation of jigsaw reaches the specified level/depth number, the fallback pool generates at the end of the last level.
 *                 2. All the elements in this structure pool can not be successfully generated.
 *                 In the above two cases, the game will try to generate a template from the fallback pool, if all the elements in the fallback pool cannot be generated successfully, nothing will be generated.
 * @param elements A list of elements to randomly select from.
 *                 For the start pool of the jigsaw structure feature, if the name of the start jigsaw block is specified, but there's no jigsaw block with the corresponding name in the selected element, the whole structure feature fails to generate. For the non-start pool, a selected element successfully generates when the following conditions are met:
 *                 1. There is a jigsaw block with the corresponding name and corresponding direction (the horizontal jigsaw blocks correspond to each other, and a up facing jigsaw block corresponds to a down facing block, while a down facing block corresponds to a up facing block) in the element.
 *                 2. The 3D Chebyshev distance between the element and the start of the structure doesn't exceed the maximum distance specified in the configured structure feature, or doesn't exceed 128 when generated by commands or jigsaw block GUI.
 *                 3. The element will not overlap with other generated jigsaws, unless the block pointed by the jigsaw block is inside the current jigsaw.
 *                 4. If the block pointed by the jigsaw block is inside the current jigsaw, then this element and all the jigsaws generated later by this element must be completely inside the jigsaw where this jigsaw block is located.
 *                 If the element fails to generate, it will try again to generate another element in the list. If all of the elements in the list cannot be generated successfully, the fallback pool will be used.
 */
public record TemplatePool(NamespaceID fallback, List<Entry> elements) {

    /**
     * An element.
     * @param weight How likely this element is to be chosen when using this pool. Value between 1 and 150 (inclusive).
     * @param element The properties of this element.
     */
    public record Entry(int weight, Element element) {
    }

    public sealed interface Element {
        Projection projection();

        default NamespaceID element_type() {
            return JsonUtils.getNamespaceTag(this.getClass());
        }

        /**
         * Generates nothing.
         */
        record EmptyPoolElement(Projection projection) implements Element {
        }

        /**
         * Generates a placed feature.
         */
        record FeaturePoolElement(Projection projection, NamespaceID feature) implements Element {
        }

        /**
         * Generates multiple elements one after another (lower elements replace their front ones).
         */
        record ListPoolElement(Projection projection, List<Element> elements) implements Element {
        }

        /**
         * Generates a structure template.
         * Will not replace existing blocks with air
         */
        record LegacySinglePoolElement(Projection projection, NamespaceID location, ProcessorList processors) implements Element {
        }

        /**
         * Generates a structure template.
         * Will replace blocks with air and relies on the structure_void block to avoid not replacing blocks
         */
        record SinglePoolElement(Projection projection, NamespaceID location, ProcessorList processors) implements Element {
        }
    }

    public enum Projection {
        /**
         * Matches the terrain (like a village road).
         */
        terrain_matching,
        /**
         * Places a fixed structure (like a house).
         */
        rigid
    }
}
